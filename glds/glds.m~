%
% function net=lds(X,K,cyc,tol);
% 
% Adaptive Linear Dynamical System 
%
% X - N x p data matrix
% K - size of state space (default 2)
% T - length of each sequence (N must evenly divide by T, default T=N)
% cyc - maximum number of cycles of EM (default 100)
% tol - termination tolerance (prop change in likelihood) (default 0.0001)
%
% net is a structure consisting of:
%
% A - state transition matrix
% C - observation (output) matrix 
% Q - state noise covariance 
% R - observation noise covariance
% x0 - initial state mean
% P0 - initial state covariance
% Mu - output mean
% LL - log likelihood curve
%
% Iterates until a proportional change < tol in the log likelihood 
% or cyc steps of EM

function [net net0]=glds(X,K,cyc,tol)

% net is  [A,C,Q,R,x0,P0,Mu,LL,LM]

net=struct('type','lds','A',[],'C',[],'Q',[],'R',[],'x0',[],'P0',[],'Mu',[],'LL',[],'LM',[]);
if size(X,1) < size(X,2) X = X.'; end
[T,p] = size(X);

if nargin<4   tol=0.0001; end;
if nargin<3   cyc=100; end;
if nargin<2   K=2; end;

Mu=mean(X);
X=bsxfun(@minus,X,Mu);

%  if (K<=p) 
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % initialize with Factor Analysis
    
    fprintf('\nInitializing with Factor Analysis...\n');
    [L,Ph,LM]=ffa(X,K,100,0.001);
    C=L;
    R=Ph;
    Phi=diag(1./R);
    temp1=Phi*L;
    temp2=Phi-temp1/(eye(K)+L'*temp1)*temp1';
    temp1=X*temp2*L;
    x0=mean(temp1)';
    Q=cov(temp1);
    P0=Q;
    t1=temp1(1:T-1,:);
    t2=temp1(2:T,:);
    
    A=(t1'*t1+Q)\t1'*t2;
    clear temp1 temp2 Phi t1 t2;
    fprintf('FA log likelihood %f\nInitialized.\n',LM(end));
Y=reshape(X,T,1,p);
Y=squeeze(permute(Y,[2 3 1]))'; % Y is (N,p,T), analogously to X
net0.A = A;net0.R = diag(R);net0.C = C;net0.Q = Q;net0.x0 = x0;net0.P0 = P0;
%YY=sum(X.*X)'/(T);
%Y = permute(Y,[2 3 1]);
[C, R, A, , ~,~, x0, V0, loglik] = kalmanMLE(Y,C,diag(R),A,Q,x0,P0);%,1,1);

net.C = C;net.R = R; net.A = A; net.Q = S; net.x0 = x0; net.P0 = V0; net.loglik = loglik;
%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   else
%     % AR1 model
%     LM=[];
%     Q=eye(K);
%     P0=Q;
%     cX=cov(X);
%     R=0.5*diag(diag(cX));
%     [u,s,v]=svd(cX-R);
%     C=u*[sqrtm(s) zeros(p,K-p)];
%     C=C+randn(p,K)*max(max(abs(C)))/20;
%     beta=C'*inv(C*C'+R);
%     t1=X*beta'+0.001*randn(N*T,K);
%     x0=mean(t1)';
% 
%     t1b=t1(1:N*T-1,:);
%     t1c=t1(2:N*T,:);
%     A=inv(t1b'*t1b+Q)*t1b'*t1c;
%     clear t1 t1b t1c cX;
%     R=diag(R);
%   end;
% return
% 
% for cycle=1:cyc
%   
%   % E STEP
%   
%   oldlik=lik;
%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   [lik,Xfin,Pfin,Ptsum,YX,A1,A2,A3]=kalmansmooth(A,C,Q,R,x0,P0,Y);
%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   LL=[LL lik];
%   fprintf('cycle %g lik %g',cycle,lik);
%   
%   if (cycle<=2)
%     likbase=lik;
%   elseif (lik<oldlik) 
%     fprintf(' violation');
%   elseif ((lik-likbase)<(1 + tol)*(oldlik-likbase)||~isfinite(lik)) 
%     fprintf('\n');
%     break;
%   end;
%   fprintf('\n');
%   
%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   % M STEP
%   
%   % Re-estimate A,C,Q,R,x0,P0;
%   
%   x0=sum(Xfin(:,:,1),1)'; 
%   T1=Xfin(:,:,1)-x0';
%   P0=Pfin(:,:,1)+T1'*T1; 
%   
%   C=YX/Ptsum;
%   
%   R=YY-diag(C*YX')/T;
%     
%   A=A1/A2;%inv(A2) 
%     
%   Q=(1/(T-1))*diag(diag((A3-A*(A1')))); 
%   if (det(Q)<0) 
%     fprintf('Q problem\n');
%   end;
%   
% end;
% 
% net.A=A;
% net.C=C;
% net.Q=Q;
% net.R=R;
% net.x0=x0;
% net.P0=P0;
% net.Mu=Mu;
% net.LL=LL;
% net.LM=LM;
