function [im cols frameCol] = superImpMax(x,frames,rad,maxVal,cols)
%%SUPERIMP combines multiple components into 1 image, assigning each
%%component a different color, for each pixel, choosing the component with
%%the largest magnitude at that location. All components are normalized.
%%INPUTS:   c = all 2-d image components
%%          frames = which components to combine in image (choose ones with well-defined features)
%%          rad = width of gaussian smoothing kernel
%%          maxVal = if you want to normalize all components by a fixed value (default: normalize maximum of each component to 1)
if exist('frames','var')
    x = x(frames,:,:);
end
x(x~=0 = zscore(x(x~=0));
allReg = zeros(size(x));
cents = zeros(size(x,1),2);
for i = 1:size(x,1)
    if exist('rad','var') && rad
        x(i,:,:) = imfilter(squeeze(x(i,:,:)),fspecial('gaussian',5,rad));
    end
    if ~exist('maxVal','var')
        x(i,:,:) = x(i,:,:)/max(max(max(x(i,:,:))));
    else
%         if numel(maxVal) > 1
%             allReg(i,:,:) = x(i,:,:) > maxVal(end);
%         else
%             allReg(i,:,:) = x(i,:,:) > maxVal/4;
%         end
%allReg(i,x(i,:)>0) = zscore(x(i,x(i,:)>0)) > maxVal(end);
        allReg(i,:,:) = bwlabel(squeeze(allReg(i,:,:)));
        allReg(i,allReg(i,:) ~= mode(allReg(i,allReg(i,:) > 0))) = 0;
        allReg(i,:,:) = min(1,allReg(i,:,:));
        allReg(i,:,:) = bwmorph(squeeze(allReg(i,:,:)),'dilate',1);
        x(i,:,:) = allReg(i,:,:).*x(i,:,:);
    end
end
figure;showGrid(allReg);drawnow;
figure;imagesc(squeeze(sum(allReg)));
%mVal = corr(x(:,:)');
mVal1 = x(:,:)*x(:,:)';%cov(x(:,:)');
for i = 1:size(mVal1,1)
%    mVal(i,i) = 0;
    mVal1(i,i) = 0;
end
%mVal = sqrt(max(0,mVal)); mVal1 = sqrt(max(0,mVal1));
%figure;subplot(211);imagesc(mVal,[0 prctile(mVal(:),99)]);
%subplot(212);imagesc(mVal1,[0 prctile(mVal1(:),99)]);return
if ~exist('cols','var')
    cols = (1:size(allReg,1))/size(allReg,1);
    [~,order] = myOsc(mVal1,size(x,1));
    cols(order) = cols;
end
%x = x(order,:,:);%allReg = allReg(order,:,:);
x = abs(x);
x = min(1,max(0,x/maxVal(1)));
[a b]= max(x);
a = squeeze(a); b = squeeze(b);
im = zeros(3,size(a,1),size(a,2));
for i = 1:size(x,1);
    im(1,b == i) = cols(i);%s(i);%i/size(x,1);
    frameCol(1,i,1) = cols(i);%s(i);%
    im(2,b == i) = 1;
    im(3,b == i) = a(b == i);
end
frameCol(1,:,2:3) = 1;
frameCol = squeeze(hsv2rgb(frameCol));
% figure;hold all;
% for i = 1:size(x,1)
%     bounds = bwboundaries(squeeze(allReg(i,:,:)));
%     plot(bounds{1}(:,1),bounds{1}(:,2),'color',frameCol(i,:),'linewidth',2);
% end
%frameCol(order,:) = frameCol;
im = max(0,im);
im = permute(im,[2 3 1]);
im = hsv2rgb(im);
figure;image(im);

function [s,order] = myOsc(mVal,sx)
p.K = -1;
p.N = sx;
p.w = zeros(p.N,1);
p.G = mVal;
thetaInit = 2*pi.*rand(p.N,1);
[~,s] = rk4(@coupledOsc,0, 100,thetaInit,10000,p); 
%sPlot(exp(1i*s));
s = s(:,end);
s = mod(s,2*pi)/(2*pi);
[~,order] = sort(s);

function thetaDot = coupledOsc(t,theta,p)
%equations for a system of weakly coupled kuramoto oscillators
% inputs, t = time, theta = oscillator phase [nOscillators x 1]
%         p.w = frequencies [nOscillators x 1], p.K = coupling strength
%         p.N = number of oscillators
%outputs, thetadot (input to rk4.m)

[theta_i,theta_j] = meshgrid(theta);
dTheta = mod(theta_j-theta_i,2*pi);%-pi;
%if dTheta >= 0
    dTheta = pi - dTheta;
%else
%    dTheta = -pi - dTheta;
%end
interactionTerm = dot(p.G',dTheta,1);%sin(theta_j-theta_i)
thetaDot = p.w + (p.K/p.N)*interactionTerm' + randn(size(p.w))/(t+1)*100;

function s = sepCols(reg,numCol)
for i = 1:size(reg,1)
    imagesc(squeeze(reg(i,:,:)));pause(.03);
    allValid = 1:numCol;
    for j = 1:i-1
        if sum(sum(sum(reg(i,:,:).*reg(j,:,:))))
            allValid(allValid == s(j)) = [];
        end
    end
    temp = randperm(numel(allValid));
    s(i) = allValid(temp(1));
end